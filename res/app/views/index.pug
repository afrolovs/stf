<!DOCTYPE html>

script.
  window.APP_CONFIG = {
    deviceFarmUrl: "#{process.env.DEVICE_FARM_URL}",
    isTvMode: "#{process.env.FARM_IS_TV_MODE}",
  }

doctype html
html(ng-app='app', data-mdb-theme="dark")
  head
    meta(charset='utf-8')
    base(href='/')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no')
    meta(name='mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-title', content='STF')
    meta(name='format-detection', content='telephone=no')
    meta(name='apple-mobile-web-app-status-bar-style', content='black-translucent')
    link(href='static/logo/exports/favicon.ico', rel='apple-touch-icon')
    // Montserrat font
    link(href="https://fonts.googleapis.com/css2?family=Inter:wght@600&family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet")
    // Material Icons
    link(href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,GRAD@48,300,-25" rel="stylesheet")
    // MDBootstrap
    link(href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.4.0/mdb.min.css" rel="stylesheet")
    style.
      .overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.5);
          backdrop-filter: blur(0);
          opacity: 0;
          pointer-events: none;
          transition: opacity 1s ease-in-out, backdrop-filter 1s ease-in-out;
          z-index: 100;
      }
      .overlay.visible {
          opacity: 1;
          backdrop-filter: blur(8px);
          transition: opacity 0.5s ease-in-out, backdrop-filter 1s ease-in-out;
          pointer-events: auto;
      }

  body(ng-cloak).bg-1.fill-height.unselectable
    div(ng-controller='LayoutCtrl', basic-mode, admin-mode, standalone, landscape).fill-height
      .pane-center(fa-pane, pane-id='main', pane-anchor='center').fill-height
        div(ng-view).fill-height

    .overlay.visible

    script(src='/app/api/v1/state.js')
    script(src='static/app/build/entry/app.entry.js')
    script(src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.2/umd/popper.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/tippy.js/6.3.7/tippy-bundle.umd.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.4.0/mdb.min.js")
    script(src="/static/logo/exports/html2canvas.min.js")

    script.
      // Проверяем, что кастомный UI загружен
      let lastUrl = window.location.href;

      const checkInterval = setInterval(function() {
        const currentUrl = window.location.href;

        // Если URL изменился
        if (currentUrl !== lastUrl) {
            location.reload();
        }
      }, 500);

      async function waitForElement(id) {
        let element = null;
        let attempts = 0;
        const maxAttempts = 10;
        const baseDelay = 300;

        while (!element && attempts < maxAttempts) {
          attempts++;
          // Проверяем элемент
          element = document.getElementById(id);

          if (!element) {
            // Вычисляем прогрессивную задержку
            const delay = baseDelay * Math.pow(1.2, attempts);
            await new Promise(resolve => setTimeout(resolve, delay));
          }
        }

        if (element) {
          console.log(`Экран девайса ${id} найден после ${attempts} попыток`);
          return element;
        } else {
          console.error(`Экран девайса ${id} не найден после ${maxAttempts} попыток!`);
          return null;
        }
      }
      waitForElement('deviceWrapper').then(element => {

          // overlay

          const overlay = document.querySelector('.overlay');
          if (overlay) overlay.classList.remove('visible');

          // tippy

          const singleton = tippy.createSingleton(tippy('[data-tippy-content]'), {
              inertia: true,
              arrow: false,
              offset: [0, 3],
              allowHTML: true,
              moveTransition: 'fade 0.2s ease-in-out',
              theme: 'okko',
              //- interactive: true,
              appendTo: document.body,
              popperOptions: {
                  positionFixed: true,
              }
          });
          if (window.location.href.includes("/watch/")) {
          htmlHelp = `
              <div style='margin: 1em;'>
                  <div style='margin-bottom: 1em;font-size: 14px'><b>Привет!</b></div>
                  <li>Тебе скинули эту ссылку, чтобы ты тоже мог смотреть на экран девайса :)
                  <li>Ещё ты можешь включить показ Logcat, чтобы синхронно смотреть логи с коллегой</li>
                  <li>Эту подсказку можно закрыть, нажав в любое место экрана</li>
              </div>
          `;
          } else {
          htmlHelp = `
              <div style='margin: 1em;'>
                  <div style='margin-bottom: 1em;font-size: 14px'><b>Что у нас тут есть?</b></div>
                  <li>Управляй девайсом с клавиатуры - для этого нажми мышкой на его экран<br style="margin-bottom: 0.5em">
                      Доступны: <kbd>↑</kbd> <kbd>↓</kbd> <kbd>←</kbd> <kbd>→</kbd> <kbd>ESC</kbd> и <kbd>ENTER</kbd></li>
                  <li>Кнопки управления девайсом находятся внизу – наведи на них, чтобы увидеть подсказку</li>
                  <li>Остальной функционал доступен в меню справа. Описание разделов можно включить, нажав на иконку бутерброда</li>
                  <li>Эту подсказку можно закрыть, нажав в любое место экрана</li>
              </div>
          `;
          }
          help_modal = document.querySelector('.menu-center-left');
          help_modal.setAttribute('data-tippy-content', htmlHelp);
          singleton.show(help_modal);
          singleton.setContent(htmlHelp);

          // Запись экрана

          let mediaRecorder;
          let stream;
          let timerInterval;
          let startTime;

          async function startRecording() {
            alert('Ждём деплоя на HTTPS: запись пока недоступна ;(')
            return

            try {
              // Запрашиваем доступ к экрану
              stream = await navigator.mediaDevices.getDisplayMedia({
                video: { mediaSource: 'screen' }
              });

              // Создаем MediaRecorder
              mediaRecorder = new MediaRecorder(stream);
              const chunks = [];

              mediaRecorder.ondataavailable = e => chunks.push(e.data);

              mediaRecorder.onstop = () => {
                const blob = new Blob(chunks, { type: 'video/webm' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'screen-recording.webm';
                a.click();

                // Очищаем таймер
                clearInterval(timerInterval);
                recordTimer.textContent = '';

                // Останавливаем все треки
                stream.getTracks().forEach(track => track.stop());
              };

              // Запускаем запись
              mediaRecorder.start();
              startTime = Date.now();

              // Обновляем таймер каждую секунду
              timerInterval = setInterval(updateTimer, 1000);

              // Меняем состояние кнопок
              startRecordBtn.disabled = true;
              stopRecordBtn.disabled = false;

            } catch (err) {
              alert(err);
              startRecordBtn.disabled = false;
              stopRecordBtn.disabled = true;
            }
          }

          function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
              mediaRecorder.stop();
            }
          }

          function updateTimer() {
            const elapsedTime = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(elapsedTime / 60).toString().padStart(2, '0');
            const seconds = (elapsedTime % 60).toString().padStart(2, '0');
            recordTimer.textContent = `Идёт запись: ${minutes}:${seconds}`;
          }

          // Назначаем обработчики кнопок
          const startRecordBtn = document.getElementById('startRecordBtn');
          const stopRecordBtn = document.getElementById('stopRecordBtn');
          const recordTimer = document.getElementById('recordTimer');

          startRecordBtn.addEventListener('click', startRecording);
          stopRecordBtn.addEventListener('click', stopRecording);

          // Инициализируем состояние кнопок
          stopRecordBtn.disabled = true;
          recordTimer.textContent = '';

          // Оснастка по UI

          const sideMenu = document.getElementById('sideMenu');
          const sideMenuToggle = document.getElementById('sideMenuToggle');
          const sideMenuSections = document.querySelectorAll('.side-menu-section');
          const sidePanelContents = document.querySelectorAll('.side-panel-content');
          const deviceWrapper = document.getElementById('deviceWrapper');

          let currentActivePanel = null;

          // Инициализация
          init();

          // Переключение режима бокового меню
          sideMenuToggle.addEventListener('click', function () {
              sideMenu.classList.toggle('expanded');
              updateLayout();
          });

          // Выбор раздела в боковом меню
          sideMenuSections.forEach(section => {
              section.addEventListener('click', function () {
                  const panelId = this.getAttribute('data-panel');

                  // Убираем активный класс у всех разделов
                  sideMenuSections.forEach(s => s.classList.remove('active'));
                  // Убираем активный класс у всех панелей
                  sidePanelContents.forEach(p => p.classList.remove('active'));

                  // Делаем текущий раздел активным
                  this.classList.add('active');

                  // Активируем соответствующую панель контента
                  if (panelId) {
                      const panel = document.getElementById(panelId);
                      if (panel) {
                          panel.classList.add('active');
                          currentActivePanel = panel;
                      }
                  }

                  updateLayout();
              });
          });

          // Функция инициализации
          function init() {
              sideMenu.classList.toggle('expanded');
          }

          // Функция для обновления макета
          function forceLayoutUpdate() {
            window.dispatchEvent(new Event('resize'));
          }

          function updateLayout() {
              setTimeout(() => {
                forceLayoutUpdate();
              }, 50);

              const sideMenuWidth = sideMenu.offsetWidth;
              const panelWidth = currentActivePanel ? currentActivePanel.offsetWidth : 0;

              // Обновляем ширину wrapper устройства
              deviceWrapper.style.width = `calc(100% - ${sideMenuWidth + panelWidth}px)`;
              deviceWrapper.style.marginRight = `${panelWidth}px`;
          }
      });